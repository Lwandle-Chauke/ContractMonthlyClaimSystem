// GET: /Claim/TrackClaims
public async Task<IActionResult> TrackClaims()
{
    var lecturerEmail = TempData["UserEmail"]?.ToString();
    var claims = await _context.Claims
        .Where(c => c.LecturerEmail == lecturerEmail)
        .ToListAsync();

    return View(claims);
}

// GET: /Claim/ReviewClaims
// GET: /Claim/ReviewClaims
public async Task<IActionResult> ReviewClaims()
{
    // Retrieve all claims with "Pending" status
    var claims = await _context.Claims
        .Where(c => c.Status == "Pending")
        .ToListAsync();

    // If no claims are found, set a message in ViewBag
    if (!claims.Any())
    {
        ViewBag.Message = "No pending claims for review.";
    }

    // Return the view with the claims data
    return View(claims);
}



// POST: /Claim/UpdateClaimStatus
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> UpdateClaimStatus(UpdateClaimStatusViewModel model)
{
    if (ModelState.IsValid)
    {
        var claim = await _context.Claims.FirstOrDefaultAsync(c => c.Id == model.ClaimId);

        if (claim != null)
        {
            // Update the status
            claim.Status = model.SelectedStatus;

            // Save changes in the database
            _context.Entry(claim).State = EntityState.Modified; // Explicitly mark entity as modified
            await _context.SaveChangesAsync();

            TempData["Message"] = "Claim status updated successfully!";
            return RedirectToAction("TrackClaims");
        }
        else
        {
            ModelState.AddModelError(string.Empty, "Claim not found.");
        }
    }
    return View(model);
}

public IActionResult UpdateClaimStatus(int claimId)
{
    var claim = _context.Claims.FirstOrDefault(c => c.Id == claimId);
    if (claim == null)
    {
        return NotFound();
    }

    var viewModel = new UpdateClaimStatusViewModel
    {
        ClaimId = claim.Id,
        LecturerName = claim.LecturerName,
        CurrentStatus = claim.Status,
        StatusOptions = new List<string> { "Pending", "Accepted", "Rejected" }
    };

    return View(viewModel);
}
